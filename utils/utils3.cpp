#include "../inc/utils3.hpp"

//std::string validPath(std::string path)
//{
//    std::string validpath;
//
//    validpath = removeLastColon(path);
//    return validpath;
//}

void checkSlash(std::string &path)
{
    if (path.at(0) != '/')
        path.insert(path.begin(), '/');
}

void printEntryMsg()
{
    std::cout << GREEN << "" << std::endl;
    std::cout << "███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗     ██╗███████╗" << std::endl;
    std::cout << "██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗    ██║██╔════╝" << std::endl;
    std::cout << "███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝    ██║███████╗" << std::endl;
    std::cout << "╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗    ██║╚════██║" << std::endl;
    std::cout << "███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║    ██║███████║" << std::endl;
    std::cout << "╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝    ╚═╝╚══════╝" << std::endl;
    std::cout << "" << std::endl;
    std::cout << "██████╗ ██╗   ██╗███╗   ██╗███╗   ██╗██╗███╗   ██╗ ██████╗      " << std::endl;
    std::cout << "██╔══██╗██║   ██║████╗  ██║████╗  ██║██║████╗  ██║██╔════╝      " << std::endl;
    std::cout << "██████╔╝██║   ██║██╔██╗ ██║██╔██╗ ██║██║██╔██╗ ██║██║  ███╗     " << std::endl;
    std::cout << "██╔══██╗██║   ██║██║╚██╗██║██║╚██╗██║██║██║╚██╗██║██║   ██║     " << std::endl;
    std::cout << "██║  ██║╚██████╔╝██║ ╚████║██║ ╚████║██║██║ ╚████║╚██████╔╝     " << std::endl;
    std::cout << "╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝      " << RESET << std::endl;

}

//void printEntryMsg()
//{
//    std::cout << GREEN << "                                       _                                 _             " << std::endl;
//    std::cout << "                                      (_)                               (_)            " << std::endl;
//    std::cout << "  ___ _____  ____ _   _ _____  ____    _  ___     ____ _   _ ____  ____  _ ____   ____ " << std::endl;
//    std::cout << " /___) ___ |/ ___) | | | ___ |/ ___)  | |/___)   / ___) | | |  _ \\|  _ \\| |  _ \\ / _  |" << std::endl;
//    std::cout << "|___ | ____| |    \\ V /| ____| |      | |___ |  | |   | |_| | | | | | | | | | | ( (_| |" << std::endl;
//    std::cout << "(___/|_____)_|     \\_/ |_____)_|      |_(___/   |_|   |____/|_| |_|_| |_|_|_| |_|\\___ |" << std::endl;
//    std::cout << "                                                                                (_____|" << std::endl;
//
//}